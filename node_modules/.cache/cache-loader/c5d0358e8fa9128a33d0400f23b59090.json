{"remainingRequest":"/Users/chemingqiang/Desktop/Blog/node_modules/thread-loader/dist/cjs.js!/Users/chemingqiang/Desktop/Blog/node_modules/babel-loader/lib/index.js!/Users/chemingqiang/Desktop/Blog/node_modules/core-js/modules/es6.promise.js","dependencies":[{"path":"/Users/chemingqiang/Desktop/Blog/node_modules/core-js/modules/es6.promise.js","mtime":499162500000},{"path":"/Users/chemingqiang/Desktop/Blog/babel.config.js","mtime":1647066144493},{"path":"/Users/chemingqiang/Desktop/Blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chemingqiang/Desktop/Blog/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chemingqiang/Desktop/Blog/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}